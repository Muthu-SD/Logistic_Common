LOGIN PAGE:-

/* .formWrapper{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;     
    background-color: #B8B8B8
} */
/* .pageWrapper {
  position: relative;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #B8B8B8;
} */

/* .logoSection {
  position: absolute;
  top: 0;
  left: 0;
  width: 65%;
  height: 100%;
  background-color: #B8B8B8;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 1;
  gap:2rem;
} */

/* .logo { */
/* max-width: 200px; */
/* margin-bottom: 7rem; */
/* padding-bottom: 2rem; */
/* } */

/* .illustration {
  max-width: 300px;
  height:180px
} */

/* .formWrapper {
  width: 400px;
  background-color: #000;
  padding: 30px;
  border-radius: 10px;
  box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);
  z-index: 1;
  position: relative;
  left:100px;
} */

/* .formContainer {
  background-color: #000;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
  color: white;
  max-width: 300px;
} */



/* Position the top-right curve */
.curveTopRight {
  position: absolute;
  top: 0;
  right: 0;
  width: 400px; /* Adjust width as per your image size */
  z-index: 0; /* Behind the login form */
}

/* Position the bottom-left curve */
.curveBottomLeft {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 400px; /* Adjust width as per your image size */
  z-index: 2; /* Behind the login form */
}


DASHBOARD PAGE:-

import React, { useState, useCallback, useMemo } from "react";
import { Layout, Menu, Button } from "antd";
import {
  UserOutlined,
  CheckCircleOutlined,
  CarOutlined,
} from "@ant-design/icons";
import Style from "../styles/auth/AuthForm.module.css";
import useStore from "../store/UseStore";

const { Header, Sider, Content, Footer } = Layout;

const Dashboard = () => {
  const [selectedKey, setSelectedKey] = useState("1");

  const { logout } = useStore();

  const handleLogout = useCallback(() => {
    logout();
  }, [logout]);

  const handleMenuClick = (e) => {
    setSelectedKey(e.key);
  };

  const menuItems = useMemo(
    () => [
      { label: "Supplier Clearance", key: "1", icon: <CheckCircleOutlined /> },
      { label: "Delivery Tracking", key: "2", icon: <CarOutlined /> },
      { label: "Overall Shipping Status", key: "3", icon: <UserOutlined /> },
    ],
    []
  );

  return (
    <Layout style={{ minHeight: "100vh" }}>
      <Sider width={200} className={Style.sider}>
        <Menu
          mode="inline"
          selectedKeys={[selectedKey]}
          onClick={handleMenuClick}
          items={menuItems}
          style={{ height: "100%", borderRight: 0, backgroundColor: "#A5A5A5" }}
        />
        <Button
          type="link"
          onClick={handleLogout}
          style={{ margin: "16px", color: "red" }}
        >
          Sign Out
        </Button>
      </Sider>
      <Layout>
        <Header className={Style.header}>
          <h1 style={{ color: "white" }}>Dashboard</h1>
        </Header>
        <Content style={{ margin: "24px 16px 0" }}>
          <div style={{ padding: 24, background: "#fff", minHeight: 360 }}>
            {selectedKey === "1" && <div>Supplier Clearance Content</div>}
            {selectedKey === "2" && <div>Delivery Tracking Content</div>}
            {selectedKey === "3" && <div>Overall Shipping Status Content</div>}
          </div>
        </Content>
        <Footer style={{ textAlign: "center" }}>
          <Button type="link" onClick={handleLogout} style={{ margin: 0 }}>
            Sign Out
          </Button>
        </Footer>
      </Layout>
    </Layout>
  );
};

export default Dashboard;


modify the below code so that i can achieve that 
1)i want in Dashboard.jsx all the header and side menu is present which should separeted in respective Header.jsx and SideBar.jx
2)And i want theme icon at Header.jsx to handle two theme in my Dashboard which is 
   -First layout theme color is #A5A5A5 sidebar and white and side menu hover with #101820 
   -Second layout theme color is Gradient color which is linear-gradient(45deg, #8226f5 0%, #e625ea 100%)

maintain the theme color code in my index.css as given below make dynamic code

for css keep in external css module  use styles folder

3)i want dark and light mode for both the theme respectively in the Header.jsx with icon to handle

4)search field in header for search the sidemenu field in search by clicking that i ges to that side menu

5)And a Avatar icon on clicking it show Account and setting

4) and sign out at last in sidebar section at end down and at top side logo should present

this below is my folder structure for your reference

src/
├── assets/
│   ├── login 
│   ├── Logo.png 
├── auth/
│   ├── Login.jsx
│   ├── SignUp.jsx
├── components/
│   ├── Button.js
│   ├── DonutChart.js
│   ├── PolarChart.js
│   ├── LineChart.js
├── context/
│   ├── ThemeContext.jsx
├── layouts/
│   ├── Header.jsx 
│   ├── SideBar.jsx
├── pages/
│   ├── Dashboard.jsx
├── routes/
│   ├── Routes.js
│   ├── ProtectedRoute.js
├── store/
│   ├── UseStore.js
├── styles/
│   ├── auth/ 
│   │   ├── AuthForm.module.css
├── App.css
├── App.js
├── index.css
├── index.js


DASHBOARD COLOR COMBINATION IN MY DASHBOARD:

give dashboard color combination for my logitic dashboard as i have used below colors in sidebar,sidemenu and navbar and in dashboard graph and other section

sidebar background:#A5A5A5
sidebar menu :#101820
navbar: #FFFFFF
section colors:#344966 ,#FFFFFF,#000000,#B8B8B8,#D9D9D9,#979797,#919191,#118F53,#22222,#FF0000



  //speak
    const speak = (message) => {
        const speech = new SpeechSynthesisUtterance(message);
        speech.lang = 'en-IN';
        window.speechSynthesis.speak(speech);
    };
    

    Theme.js:-

    // src/theme/theme.js

export const lightTheme = {
  token: {
    colorPrimary: "#177ddc",
    // colorBgContainer: "linear-gradient(45deg, #8226f5 0%, #e625ea 100%)",
    // borderRadius: 2,
    colorBgContainer: "linear-gradient(to right, #628EFF 0%, #8740CD 52%, #580475 100%);",
  },
  component: {
    button: {
      backgroundColor: "#ffffff",
      color: "#000000",
      border: "1px solid #00b96b",
    },
    card: {
      backgroundColor: "#f9f9f9",
      color: "#000000",
      border: "1px solid #ddd",
    },
  },
};

export const darkTheme = {
  token: {
    colorPrimary: "#177ddc",
    colorBgContainer: "#141414",
    borderRadius: 2,
  },
  component: {
    button: {
      backgroundColor: "#333333",
      color: "#ffffff",
      border: "1px solid #177ddc",
    },
    card: {
      backgroundColor: "#222222",
      color: "#ffffff",
      border: "1px solid #444444",
    },
  },
};

    ThemeContext.jsx:-

// src/context/ThemeContext.js

import React, { createContext, useContext, useState } from "react";
import { darkTheme, lightTheme } from "../theme/Theme";

export const ThemeContext = createContext();

const ThemeProvider = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(false);

  const toggleTheme = () => {
    setIsDarkMode((prev) => !prev);
  };

  return (
    <ThemeContext.Provider
      value={{
        isDarkMode,
        toggleTheme,
        theme: isDarkMode ? darkTheme : lightTheme,
      }}
    >
      {children}
    </ThemeContext.Provider>
  );
};

export default ThemeProvider;

export const useTheme = () => useContext(ThemeContext);

Header.jsx:-

import React from "react";
import { Menu, Avatar, Dropdown,Input } from "antd";
import {
  UserOutlined,
  SearchOutlined,
  SunOutlined,
  MoonOutlined,
} from "@ant-design/icons";
import { useTheme } from "../context/ThemeContext";
import styles from "../styles/Header.module.css";
// import Button from "../components/Button";

const Header = () => {
  // const { toggleTheme, isDarkMode, theme } = useContext(ThemeContext);
  const { toggleTheme, isDarkMode, theme } = useTheme();

  const menu = (
    <Menu>
      <Menu.Item key="account">Account</Menu.Item>
      <Menu.Item key="settings">Settings</Menu.Item>
    </Menu>
  );

  return (
    <div
      className={styles.header}
      style={{ background: theme.token.colorBgContainer }}
    >
      <Input
        className={styles.search}
        placeholder="Search menu..."
        prefix={<SearchOutlined />}
      />
      <div style={{display:"flex"}}>
      {/* <div className={styles.themeIcon}>
        <BulbOutlined onClick={toggleTheme} />
      </div> */}
      {/* <Button label="Hello" /> */}
      <div className={styles.darkModeIcon}>
        {isDarkMode ? (
          <SunOutlined onClick={toggleTheme} />
        ) : (
          <MoonOutlined onClick={toggleTheme} />
        )}
      </div>
      <Dropdown overlay={menu} trigger={["click"]}>
        <Avatar icon={<UserOutlined />} />
      </Dropdown>
    </div>
    </div>
  );
};

export default Header;


Sidebar.jsx:-

import React from "react";
import { Menu, Button } from "antd";
import {
  UserOutlined,
  CheckCircleOutlined,
  CarOutlined,
} from "@ant-design/icons";
import styles from "../styles/Sidebar.module.css";
import useStore from "../store/UseStore";
import logo from "../assets/Logo2.png";
import { useTheme } from "../context/ThemeContext";


const Sidebar = ({ selectedKey, setSelectedKey }) => {

  const { theme,isDarkMode } = useTheme();
  const handleMenuClick = (e) => {
    setSelectedKey(e.key);
  };

  const { logout } = useStore();

  return (
    <div className={styles.sidebar} style={{background:theme.token.colorBgContainer}}>

      <div className={styles.logoContainer}>
        <img src={logo} alt="Logo" className={styles.logo} style={{filter : isDarkMode ?"invert(1)" : "" }} />
      </div>
      <Menu
        mode="inline"
        selectedKeys={[selectedKey]}
        onClick={handleMenuClick}
        style={{
          height: "100%",
          // backgroundColor: theme.sidebarBg,
        }}
      >
        <Menu.Item key="1" icon={<CheckCircleOutlined />}>
          Supplier Clearance
        </Menu.Item>
        <Menu.Item key="2" icon={<CarOutlined />}>
          Delivery Tracking
        </Menu.Item>
        <Menu.Item key="3" icon={<UserOutlined />}>
          Overall Shipping Status
        </Menu.Item>
      </Menu>
      <Button onClick={logout} className={styles.signOut}>
        Sign Out
      </Button>
    </div>
  );
};

export default Sidebar;


Dashboard.jsx :-

import React, { useState } from "react";
import { Layout } from "antd";
import Header from "../layouts/Header";
import Sidebar from "../layouts/Sidebar";
import styles from "../styles/Dashboard.module.css";

const { Content} = Layout; // Destructure Header, Content, and Footer

const Dashboard = () => {
  const [selectedKey, setSelectedKey] = useState("1");
  // const { theme } = useContext(ThemeContext);

  return (
    <Layout style={{ minHeight: "100vh" }} className={styles.dashboard}>
      <Sidebar selectedKey={selectedKey} setSelectedKey={setSelectedKey} />
      <Layout>
        <Header />
        <Content style={{ margin: "24px 16px 0", padding: 24 }}>
          {selectedKey === "1" && <div>Supplier Clearance Content</div>}
          {selectedKey === "2" && <div>Delivery Tracking Content</div>}
          {selectedKey === "3" && <div>Overall Shipping Status Content</div>}
        </Content>
        {/* <Footer style={{ textAlign: "center" }}>Footer</Footer> */}
      </Layout>
    </Layout>
  );
};

export default Dashboard;


DASHBOARD FOR REFERENCE:-

import React, { useState } from "react";
import { Layout } from "antd";
import Header from "../layouts/Header";
import Sidebar from "../layouts/Sidebar";
import { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid } from 'recharts'; // Import Recharts
import styles from "../styles/Dashboard.module.css";

const { Content } = Layout;

const Dashboard = () => {
  const [selectedKey, setSelectedKey] = useState("1");
  const [importedData, setImportedData] = useState([]); // State for imported data

  const handleDataImport = (data) => {
    setImportedData(data);
  };

  return (
    <Layout style={{ minHeight: "100vh" }} className={styles.dashboard}>
      <Sidebar selectedKey={selectedKey} setSelectedKey={setSelectedKey} />
      <Layout>
        <Header onImport={handleDataImport} />
        <Content style={{ margin: "24px 16px 0", padding: 24 }}>
          {selectedKey === "1" && (
            <div>
              <h2>Supplier Clearance Content</h2>
              <LineChart width={600} height={300} data={importedData}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <CartesianGrid strokeDasharray="3 3" />
                <Line type="monotone" dataKey="value" stroke="#8884d8" />
              </LineChart>
            </div>
          )}
          {selectedKey === "2" && <div>Delivery Tracking Content</div>}
          {selectedKey === "3" && <div>Overall Shipping Status Content</div>}
        </Content>
      </Layout>
    </Layout>
  );
};

export default Dashboard;


DASHBOARD.jsx:-

import React, { useState } from "react";
import { Layout } from "antd";
import Header from "../layouts/Header";
import Sidebar from "../layouts/Sidebar";
import { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid } from 'recharts'; // Import Recharts
import styles from "../styles/Dashboard.module.css";

const { Content } = Layout;

const Dashboard = () => {
  const [selectedKey, setSelectedKey] = useState("1");
  const [importedData, setImportedData] = useState([]); // State for imported data

  const handleDataImport = (data) => {
    // Assuming data has columns named "name" and "value"
    const formattedData = data.map((row, index) => ({
      name: row.name || `Entry ${index + 1}`, // Ensure each row has a name
      value: row.value || 0, // Use 'value' column or default to 0
    }));
    setImportedData(formattedData);
  };
  
  return (
    <Layout style={{ minHeight: "100vh" }} className={styles.dashboard}>
      <Sidebar selectedKey={selectedKey} setSelectedKey={setSelectedKey} />
      <Layout>
        <Header onImport={handleDataImport} />
        <Content style={{ margin: "24px 16px 0", padding: 24 }}>
          {selectedKey === "1" && (
            <div>
              <h2>Supplier Clearance Content</h2>
              <LineChart width={600} height={300} data={importedData}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <CartesianGrid strokeDasharray="3 3" />
                <Line type="monotone" dataKey="value" stroke="#8884d8" />
              </LineChart>
            </div>
          )}
          {selectedKey === "2" && <div>Delivery Tracking Content</div>}
          {selectedKey === "3" && <div>Overall Shipping Status Content</div>}
        </Content>
      </Layout>
    </Layout>
  );
};

export default Dashboard;

App.css:-

.App {
  text-align: center;
}

.App-logo {
  /* height: 40vmin; */
  height: 400px;
  width: 400px;
  pointer-events: none;
  border-radius: 50%;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

Dashboard.jsx:-

// Dashboard.jsx
import React from "react";
import DashboardSidemenu from "./DashboardSidemenu";
import SupplierAnalyticsCard from "./SupplierAnalyticsCard";
import InfoCard from "../../components/InfoCard";
import { Col, Row, Avatar } from "antd";
import { FaUserCircle } from "react-icons/fa";
import { GiCrystalGrowth } from "react-icons/gi"; //GiProfit
import styles from "../../styles/Dashboard.module.css";
import DonutChart from "../../components/DonutChart";
const Dashboard = () => {
  return (
    <div>
      <DashboardSidemenu />
      <div style={{ padding: "20px" }}>
        <Row gutter={[16, 16]} style={{ marginTop: "20px" }}>
          {/* Left Section */}
          <Col xs={24} md={6}>
            <>
              <InfoCard
                padding="0px"
                title={
                  <div style={{ padding: "24px 24px 0px 24px" }}>
                    <Avatar
                      icon={<FaUserCircle style={{ color: "black" }} />}
                      style={{ marginRight: "8px" }}
                    />
                    Supplier Name
                  </div>
                }
                subtitle={
                  <div style={{ padding: "12px 24px 0px 24px" }}>
                    <span style={{ fontSize: "1rem", fontWeight: "600" }}>
                      290
                    </span>
                  </div>
                }
              >
                <div style={{ padding: "24px", background: "red" }}>
                  <p>gdvajchgmvd</p>
                </div>
              </InfoCard>
            </>
            <InfoCard
              title={
                <span style={{ fontSize: "10px", color: "grey" }}>
                  Profit Target
                </span>
              }
              subtitle={
                <span
                  style={{
                    fontSize: "2rem",
                    fontWeight: "600",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "space-between",
                  }}
                >
                  40%
                  <Avatar
                    icon={<GiCrystalGrowth style={{ color: "black" }} />}
                    size={64}
                  />
                </span>
              }
            >
              <div className={styles.progressBar}>
                <div
                  className={styles.progressIndicator}
                  style={{ width: `${60}%`, backgroundColor: "#344966" }}
                />
              </div>
            </InfoCard>
          </Col>

          {/* Supplier Info and Import Volume Section */}
          <Col xs={24} md={12}>
            <SupplierAnalyticsCard />
          </Col>
          <Col xs={24} md={6}>
            <InfoCard>
              <DonutChart />
            </InfoCard>
          </Col>
        </Row>
      </div>
    </div>
  );
};

export default Dashboard;


16-Nov-2024
(multiple graph static changing as client said so for reference old code)
Dashboard.jsx:-

// Dashboard.jsx
import React from "react";
import DashboardSidemenu from "./DashboardSidemenu";
import SupplierAnalyticsCard from "./SupplierAnalyticsCard";
import InfoCard from "../../components/InfoCard";
import { Col, Row, Avatar } from "antd";
import { FaUserCircle } from "react-icons/fa";
import { GiCrystalGrowth } from "react-icons/gi"; //GiProfit
import styles from "../../styles/Dashboard.module.css";
import DonutChart from "../../components/DonutChart";
import { useTheme } from "../../context/ThemeContext";
const Dashboard = () => {
  const { theme } = useTheme();
  return (
    <div>
      <DashboardSidemenu />
      <div style={{ padding: "20px" }}>
        <Row gutter={[16, 16]} style={{ marginTop: "20px" }}>
          {/* Left Section */}
          <Col xs={24} md={6}>
            <>
              <InfoCard
                padding="0px"
                title={
                  <div style={{ padding: "24px 24px 0px 24px" }}>
                    <Avatar
                      icon={<FaUserCircle style={{ color: "black" }} />}
                      style={{ marginRight: "8px" }}
                    />
                    Supplier Name
                  </div>
                }
                subtitle={
                  <div style={{ padding: "12px 24px 0px 24px" }}>
                    <span style={{ fontSize: "1rem", fontWeight: "600" }}>
                      290
                    </span>
                  </div>
                }
              >
                <div
                  style={{
                    padding: "15px",
                    color: "white",
                    background: theme.component.paddingCard.backgroundColor,
                  }}
                >
                  <p>209 product available</p>
                </div>
              </InfoCard>
            </>
            <InfoCard
              title={
                <span style={{ fontSize: "10px", color: "grey" }}>
                  Profit Target
                </span>
              }
              subtitle={
                <span
                  style={{
                    fontSize: "2rem",
                    fontWeight: "600",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "space-between",
                  }}
                >
                  40%
                  <Avatar
                    icon={<GiCrystalGrowth style={{ color: "black" }} />}
                    size={64}
                  />
                </span>
              }
            >
              <div className={styles.progressBar}>
                <div
                  className={styles.progressIndicator}
                  style={{ width: `${60}%`, backgroundColor: "#344966" }}
                />
              </div>
            </InfoCard>
          </Col>

          {/* Supplier Info and Import Volume Section */}
          <Col xs={24} md={12}>
            <SupplierAnalyticsCard />
          </Col>
          <Col xs={24} md={6}>
            <InfoCard>
              <DonutChart />
            </InfoCard>
          </Col>
        </Row>
      </div>
    </div>
  );
};

export default Dashboard;

color_reference :-

/* StackedGraph_1 */
  --stackedGraph1-color1_t1: #79f2b9;
  --stackedGraph1-color2_t1: #ef4bc0dc;
  --stackedGraph1-color3_t1: #8740cd;
  /* --stackedGraph1-color3_t1:linear-gradient(circle, #60F2F2 0%, #10ADD0 100%); */
  --stackedGraph1-color1_t2: #4084b3;
  --stackedGraph1-color2_t2: #b4cded;
  --stackedGraph1-color3_t2: #919191;
  /* StackedGraph_2 */
  --stackedGraph2-color1_t1: #008ffb;
  --stackedGraph2-color2_t1: #00e396;
  --stackedGraph2-color3_t1: #feb019;
  --stackedGraph2-color4_t1: #dc143c;
  --stackedGraph2-color5_t1: #3357ff;
  /* --stackedGraph2-color3_t1:linear-gradient(circle, #60F2F2 0%, #10ADD0 100%); */
  --stackedGraph2-color1_t2: #ff5733;
  --stackedGraph2-color2_t2: #33ff57;
  --stackedGraph2-color3_t2: #3357ff;
  --stackedGraph2-color4_t2: #919191;
  --stackedGraph2-color5_t2: #b4cded;


  donutChart.js:-(Dynamic code)

  import React from 'react';
import ApexCharts from 'react-apexcharts';

const DonutChart = ({ chartData, chartTitle }) => {
    const chartOptions = {
        chart: {
            type: 'donut',
        },
        labels: chartData.map(item => item.label), // dynamically setting labels
        plotOptions: {
            pie: {
                donut: {
                    size: '50%',
                },
            },
        },
        legend: {
            position: 'bottom',
        },
        tooltip: {
            y: {
                formatter: (val) => `${val} Tons`,
            },
        },
        colors: [
            '#00E396', '#FF4560', '#775DD0', '#FEB019', '#FF66B2', 
            '#28B9B5', '#FFB6C1', '#00B8D4', '#9C27B0', '#FF9800', 
            '#8BC34A', '#E91E63'
          ]
    };

    const chartSeries = chartData.map(item => item.value);

    return (
        <div className="donut-chart">
            <h3>{chartTitle}</h3>
            <ApexCharts
                options={chartOptions}
                series={chartSeries}
                type="donut"
                height="300px"
            />
        </div>
    );
};

export default DonutChart;


GRADIENT DONUT:-

import React from 'react';
import ApexCharts from 'react-apexcharts';

const DonutChart = ({ chartData, chartTitle }) => {
    // Define 12 gradient colors
    const gradientColors = [
      {
        stops: [
          [0, '#FFB6C1'],
          [100, '#FF66B2'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#00E396'],
          [100, '#00B8D4'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#775DD0'],
          [100, '#FEB019'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#FF4560'],
          [100, '#FF9800'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#28B9B5'],
          [100, '#8BC34A'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#00B8D4'],
          [100, '#FF66B2'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#9C27B0'],
          [100, '#E91E63'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#00E396'],
          [100, '#FFB6C1'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#FF9800'],
          [100, '#8BC34A'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#FF66B2'],
          [100, '#FEB019'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#FF4560'],
          [100, '#00E396'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
      {
        stops: [
          [0, '#FFB6C1'],
          [100, '#775DD0'],
        ],
        opacityFrom: 0.7,
        opacityTo: 0.9,
        type: 'linear',
        direction: 'horizontal',
      },
    ];

    const chartOptions = {
        chart: {
            type: 'donut',
        },
        labels: chartData.map(item => item.label), // Dynamically setting labels
        plotOptions: {
            pie: {
                startAngle: -90,  // Start angle for the donut
                endAngle: 270,    // End angle for the donut
            },
        },
        dataLabels: {
            enabled: false,  // Disable data labels on the donut chart
        },
        legend: {
            position: 'bottom',
        },
        tooltip: {
            y: {
                formatter: (val) => `${val} Tons`,  // Customize the tooltip format
            },
        },
        fill: {
            type: 'gradient',  // Enable gradient fill
            gradient: {
                type: 'linear',  // Define the type of gradient
                opacityFrom: 0.7,  // Set the starting opacity
                opacityTo: 0.9,    // Set the ending opacity
                stops: gradientColors,  // Apply the defined gradients
            },
        },
        colors: gradientColors.map(gradient => gradient.stops[0][1]), // Fallback solid colors for chart compatibility
    };

    const chartSeries = chartData.map(item => item.value);

    return (
        <div className="donut-chart">
            <h3>{chartTitle}</h3>
            <ApexCharts
                options={chartOptions}
                series={chartSeries}
                type="donut"
                height="300px"
            />
        </div>
    );
};

export default DonutChart;

Clearance Lead Time Chart:-
ADDED LEGEND FOR COLOR RANGE AND WHILE HOVERING IT AS TO FIX THE ISSUE FOR REFERENCE I AM SAVING 

import React, { useRef, useState } from "react";
import ReactApexChart from "react-apexcharts";

const SingleBarChart = ({ chartTitle, data }) => {
  const chartRef = useRef(null); // Ref to access the chart instance
  const [hoveredRange, setHoveredRange] = useState(null); // Track hovered range

  // Extract x-axis categories and y-axis data from the provided prop
  const categories = data.map((item) => item.OOC_date);
  const seriesData = data.map((item) => item.clearance_lead_time);

  const colorRanges = [
    { label: "Negative Values", color: "#FF4D4F", range: [-100, -1] },
    { label: "0-5 Days", color: "#28A745", range: [0, 5] },
    { label: "6-10 Days", color: "#FFC107", range: [6, 10] },
    { label: "11-15 Days", color: "#17A2B8", range: [11, 15] },
  ];
  
  const options = {
    chart: {
      type: "bar",
      toolbar: {
        show: false,
      },
    },
    xaxis: {
      categories: categories,
      title: { text: "OOC Date" },
    },
    yaxis: {
      title: { text: "Clearance Lead Time (Days)" },
    },
  tooltip: {
    y: {
      formatter: (value,{ dataPointIndex }) => {
        const eta = data[dataPointIndex].ETA;  // Get the ETA based on the index
        return `${value} days | ETA: ${eta}`;
      },
    },
  },

  plotOptions: {
    bar: {
      colors: {
        ranges: colorRanges.map((range) => ({
          from: range.range[0],
          to: range.range[1],
          color: range.color,
        })),
      },
    },
  },
  states: {
    normal: {
      filter: { type: "none" }, // Normal state (default)
    },
    active: {
      filter: {
        type: "lighten",
        value: 0.5, // Dim other bars slightly when hovered
      },
    },
  },
  colors: ["#101820"], // Default color for non-matching bars
};

  const series = [
    {
      name: "Lead Time",
      data: seriesData,
    },
  ];

  const handleLegendHover = (range) => {
    setHoveredRange(range);
    if (chartRef.current) {
      const chart = chartRef.current.chart;
      const activeIndexes = seriesData
        .map((value, index) => {
          return value >= range.range[0] && value <= range.range[1]
            ? index
            : null;
        })
        .filter((i) => i !== null);

      chart.toggleHighlight({
        seriesIndex: 0,
        dataPointIndex: activeIndexes,
      });
    }
  };

  const handleLegendLeave = () => {
    setHoveredRange(null);
    if (chartRef.current) {
      chartRef.current.chart.clearHighlight();
    }
  };

  return (
    <div>
        <h3>{chartTitle}</h3>
      <ReactApexChart 
      ref={chartRef} // Attach ref to the chart
      options={options} 
      series={series} 
      type="bar" 
      height="350px"/>
     {/* Custom Legend */}
     <div style={{ marginTop: "10px" }}>
        <div style={{ display: "flex", gap: "20px", justifyContent:"center"}}>
          {colorRanges.map((range, index) => (
            <div key={index} style={{ display: "flex", alignItems: "center", gap: "10px",cursor: "pointer", }}
            onMouseEnter={() => handleLegendHover(range)}
              onMouseLeave={handleLegendLeave}
            >
              <span
                style={{
                  width: "15px",
                  height: "15px",
                  borderRadius:"50%",
                  backgroundColor: range.color,
                  display: "inline-block",
                }}
              ></span>
              <span>{range.label}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default SingleBarChart;

